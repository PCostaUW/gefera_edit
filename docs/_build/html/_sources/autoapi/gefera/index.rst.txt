:py:mod:`gefera`
================

.. py:module:: gefera


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   animate/index.rst
   gefera/index.rst
   kep/index.rst
   phot/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   gefera.System
   gefera.Orbit
   gefera.SatelliteOrbit
   gefera.PrimaryOrbit
   gefera.ConfocalOrbit
   gefera.HierarchicalSystem
   gefera.ConfocalSystem



Functions
~~~~~~~~~

.. autoapisummary::

   gefera.draw
   gefera.draw_series
   gefera.snapshots
   gefera.animate



.. py:class:: System(o1, o2)

   Base class of all systems. This class should not
   be instantiated directly. Use ConfocalSystem or
   HierarchicalSystem instead.

   :param o1: The orbit of the first body
   :type o1: Orbit
   :param o2: The orbit of the second body
   :type o2: Orbit

   .. py:method:: coords(self, t)

      Get the coordinates of the planet and moon.

      :param t: Times at which the coordinates should be computed.

      :returns: Coorinates of the planet as a tuple of arrays (x, y, z)
                mc: Coordinates of the moon as a tuple of arrays (x, y, z)
      :rtype: pc


   .. py:method:: impacts(self, t, grad=False)


   .. py:method:: phot(self, t, u1, u2, r1, r2, bp, bpm, theta, grad=False)


   .. py:method:: lightcurve(self, t, u1, u2, r1, r2, grad=False, integrate=None, dt=None)

      Get the lightcurve resulting from a transit of the moon/planet system.

      :param t: Times at which the flux should be computed
      :param r1: Radius of the body in the PrimaryOrbit
      :param r2: Radius of the body in the SecondaryOrbit or ConfocalOrbit
      :param u1: The first limb-darkening parameter
      :param u2: The second limb-darkening parameter
      :param grad: If True, compute the gradient of the lightcurve.
                   Default is False.
      :type grad: bool

      :returns: The lightcurve
                grad: A dict containing the derivatives of the
                    lightcurve with respect to each of the input parameters.
      :rtype: lc


   .. py:method:: loglike(self, y, t, u1, u2, r1, r2, sigma, integrate=None, dt=None, grad=False)

      Get the log-likelihood of the lightcurve.

      :param y: A vector of observations to compute the likelihood with
                respect to.
      :param t: Times at which the flux should be computed
      :param r1: Radius of the body in the PrimaryOrbit
      :param r2: Radius of the body in the SecondaryOrbit or ConfocalOrbit
      :param u1: The first limb-darkening parameter
      :param u2: The second limb-darkening parameter
      :param sigma: The standard deviation of the model


   .. py:method:: time(self, t, u1, u2, r1, r2, phot_only=False, grad=False, ntimes=1)



.. py:class:: Orbit(a, t, e, p, w, i)

   Parent class of all orbits. This class does not contain
   all the necessary attributes for all orbits.

   :param a: Semimajor axis
   :param t: Time of periastron passage
   :param e: Eccentricity
   :param p: Period
   :param w: Argument of periastron (in radians)
   :param i: Inclination (in radians)

   .. py:method:: pdict(self)



.. py:class:: SatelliteOrbit(a, t, e, p, o, w, i, m)

   Bases: :py:obj:`Orbit`

   The orbit of the moon around the planet.

   :param a: Semimajor axis
   :param t: Time of periastron passage
   :param e: Eccentricity
   :param p: Period
   :param o: Longitude of ascending node (in radians)
   :param w: Argument of periastron (in radians)
   :param i: Inclination (in radians)
   :param m: Moon/planet mass ratio

   .. py:method:: pdict(self)



.. py:class:: PrimaryOrbit(a, t, e, p, w, i)

   Bases: :py:obj:`Orbit`

   A heliocentric orbit for the primary body in the system.

   :param a: Semimajor axis
   :param t: Time of periastron passage
   :param e: Eccentricity
   :param p: Period
   :param w: Argument of periastron (in radians)
   :param i: Inclination (in radians)

   .. py:method:: pdict(self)



.. py:class:: ConfocalOrbit(a, t, e, p, o, w, i)

   Bases: :py:obj:`Orbit`

   A second heliocentric orbit.

   :param a: Semimajor axis
   :param t: Time of periastron passage
   :param e: Eccentricity
   :param p: Period
   :param o: Longitude of ascending node (in radians)
   :param w: Argument of periastron (in radians)
   :param i: Inclination (in radians)

   .. py:method:: pdict(self)



.. py:class:: HierarchicalSystem(o1, o2)

   Bases: :py:obj:`System`

   Represents a system with a primary body orbiting
   a central star and a satellite orbiting the
   primary body.

   :param o1: The orbit of the primary
              body around the central star
   :type o1: PrimaryOrbit
   :param o2: The orbit of the satellite around
              the primary body.
   :type o2: SatelliteOrbit


.. py:class:: ConfocalSystem(o1, o2)

   Bases: :py:obj:`System`

   Represents a system with two bodies
   orbiting a central star.

   :param o1: The orbit of the first body
   :type o1: PrimaryOrbit
   :param o2: The orbit of the second body
   :type o2: ConfocalOrbit


.. py:function:: draw(sys, ax, t, r1, r2, ld_params=None, cmap=plt.cm.copper, fill=True)


.. py:function:: draw_series(sys, ax, t, r1, r2, ld_params=None, cmap=plt.cm.copper, fill=True, alpha=1.0)


.. py:function:: snapshots(sys, axs, t, r1, r2, ld_params=None, cmap=plt.cm.copper, fill=True)


.. py:function:: animate(sys, fig, t, r1, r2, duration=5, ld_params=None, cmap=plt.cm.copper)


